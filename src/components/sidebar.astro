---
import { type CollectionEntry, getCollection } from 'astro:content';
import SidebarSearchBar from '../components/SidebarSearchBar.tsx';
import SidebarSelectButton from '../components/SidebarSelectButton.tsx';

const docsEntries = await getCollection('docs');
const currentUrl = Astro.url.pathname;
const orderGroups = ['intro', 'use', 'about'];

const groups = new Set(
  docsEntries.map((entry) => {
    return entry.data.group;
  }),
);
type GroupedEntry = { groupName: string; entries: CollectionEntry<'docs'>[] };
const entriesGrouped: GroupedEntry[] = [];

for (const group of groups) {
  entriesGrouped.push({
    groupName: group,
    entries: [],
  });
  for (const item of docsEntries) {
    if (item.data.group === group) {
      entriesGrouped.find((ge) => ge.groupName === group)?.entries.push(item);
    }
  }
}

for (const grouped of entriesGrouped) {
  grouped.entries.sort((a, b) => {
    if (a.data.order >= b.data.order) {
      return 1;
    }
    return -1;
  });
}

entriesGrouped.sort((a, b) => {
  if (
    orderGroups.findIndex((groupName) => groupName === a.groupName) >
    orderGroups.findIndex((groupName) => groupName === b.groupName)
  ) {
    return 1;
  }

  if (
    orderGroups.findIndex((groupName) => groupName === a.groupName) ===
    orderGroups.findIndex((groupName) => groupName === b.groupName)
  ) {
    return 0;
  }

  return -1;
});
---

<script>
const pathupdate = ({detail: {visit}}: {detail: any}) => {
    document.querySelectorAll("a[href].SidebarSelectButton").forEach((button) => {
      if (`${button.getAttribute('href')}` === visit.to.url) {
        button.classList.add('selected')
      } else {
        button.classList.remove('selected')
      }
    })

    const sidebar = document.querySelector("div.sidebar_container")
    if (`/` !== visit.to.url) {
      sidebar?.classList.remove('necessary')
    } else {
      sidebar?.classList.add('necessary')
    }
  }
  
  // @ts-ignore
  document.addEventListener('swup:page:view', pathupdate)
</script>

<div class={currentUrl === "/" ? `sidebar_container necessary`: `sidebar_container`}>
  <SidebarSearchBar client:visible />
  <div class="mobile-info">
    <h2>Welcome to m3ripple documentation & demo</h2>
    <p>First, let's open "At a Glance".</p>
  </div>
  <div class="items">
    <div class="group_items" data-group-name="home">
      <SidebarSelectButton
        iconifyIcon="material-symbols:home-outline-rounded"
        settingName="Home"
        settingDesc="Let's get started."
        href={`/`}
        className={`/` === currentUrl ? 'selected home': 'home'}
        client:visible
      />
      <SidebarSelectButton
        iconifyIcon="material-symbols:home-outline-rounded"
        settingName="Home"
        settingDesc="Let's get started."
        href={`/home/`}
        className={`/home/` === currentUrl ? 'mobile home': 'mobile home'}
        client:visible
      />
    </div>
    {entriesGrouped.map((group: GroupedEntry) => (
      <div class="group_items" data-group-name={group.groupName}>
        {group.entries.map((entry) => {
          return (<SidebarSelectButton
            iconifyIcon={entry.data.icon}
            settingName={entry.data.title}
            settingDesc={entry.data.desc}
            href={`/${entry.slug}/`}
            className={`/${entry.slug}/` === currentUrl ? 'selected': ''}
            client:visible
          />)
        })}
      </div>
    ))}
  </div>
</div>

<style is:global>
.group_items :first-child a.SidebarSelectButton > div.rippleContainer {
  border-top-left-radius: 20px;
  border-top-right-radius: 20px;
}
.group_items :last-child a.SidebarSelectButton > div.rippleContainer {
  border-bottom-left-radius: 20px;
  border-bottom-right-radius: 20px;
}
</style>

<style>
.sidebar_container {
  overflow-y: auto;
  background: #14100c;
  padding: 25px;
  height: 100%;
  max-width: 600px;
  width: 50%;
  position: relative;
  box-sizing: border-box;
}
.items {
  display: flex;
  flex-direction: column;
  gap: 25px;
}

.group_items {
  display: flex;
  flex-direction: column;
  gap: 5px;
}

.mobile-info {
  display: none;
  justify-content: center;
  align-items: center;
  flex-direction: column;
  background-color: #423629;
  border-radius: 20px;
  margin-bottom: 40px;
  padding: 20px;
  gap: 5px;
  & p {
    width: fit-content;
    margin: 0;
    text-align: center;
  }
  & h2 {
    text-align: center;
    font-size: 1.4rem;
    font-weight: 600;
    margin: 0;
  }
}
.group_items :global(a.mobile.home) {
  display: none;
}

.group_items :global(a.home .rippleContainer) {
  border-radius: 20px;
}

@media screen and (max-width: 1140px) {
  .sidebar_container:not(.necessary) {
    display: none;
  }
  .sidebar_container {
    width: 100%;
    max-width: unset;
  }
  .mobile-info {
    display: flex;
  }
  .group_items :global(a.home) {
    display: none;
  }
  .group_items :global(a.mobile.home) {
    display: revert;
  }
}
</style>
